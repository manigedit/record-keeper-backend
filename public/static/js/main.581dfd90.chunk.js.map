{"version":3,"sources":["utils/api.js","components/homepage.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","create","baseURL","api","apisauce","timeout","createUser","body","post","getEntries","get","getOldEntriesByUser","userId","createNewEntry","HomePage","props","savedUser","localStorage","getItem","console","log","_id","JSON","parse","state","fetchOldEntriesRequest","fetchOldEntriesSucess","fetchOldEntriesFailure","submitNewEntryRequest","submitNewEntrySuccess","submitNewEntryFailure","submittedImages","totalImages","isOldUser","oldEntries","folderPicked","createNewUserRequest","createNewUserSucess","createNewUserFailure","Date","directoryRef","React","createRef","getEntriesByUser","bind","handleSubmitButton","handleSkipButton","handleDirectoryChange","this","setState","then","response","ok","data","err","createdOn","createNewEntrySuccess","generateNewPrompt","setItem","stringify","error","imageIndex","length","alert","currentImage","value","entry","createNewEntryRequest","createNewEntryFailure","path","webkitRelativePath","timestamp","current","files","URL","createObjectURL","otherArray","Array","from","filter","other","createNewUser","ref","onChange","directory","webkitdirectory","type","className","src","placeholder","required","e","target","trim","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.581dfd90.chunk.js","sourcesContent":["import apisauce from 'apisauce';\n\nconst BASE_URL = 'http://localhost:3000/api/v1/';\n\n\nconst create = (baseURL = BASE_URL) => {\n\n    const api = apisauce.create({\n      baseURL,\n      timeout: 10000,\n    });\n  \n    \n    const createUser = (body) => {\n      return api.post('/users', body)\n    }\n\n    const getEntries = () => {\n      return api.get('/entries');\n    }\n\n    const getOldEntriesByUser = (userId) => {\n      return api.get(`/entries/${userId}`);\n    }\n\n    const createNewEntry = (body) => {\n      return api.post('/entries', body);\n    }\n  \n    return {\n      // Exporting the list of api functions for use in other modules\n      createUser,\n      getEntries,\n      getOldEntriesByUser,\n      createNewEntry,\n    };\n  };\n\n\nexport default create();\n","import React, { Component } from 'react';\nimport api from '../utils/api'\nimport './homepage.css'\n\nexport class HomePage extends Component {\n    constructor (props) {\n        super(props);\n\n        const savedUser = localStorage.getItem('samajhUser');\n\n        if (savedUser) {\n            console.log('Found saved user', savedUser);\n\n            const { _id } = JSON.parse(savedUser);\n\n            this.state = {\n                fetchOldEntriesRequest: true,\n                fetchOldEntriesSucess: false,\n                fetchOldEntriesFailure: false,\n                submitNewEntryRequest: false,\n                submitNewEntrySuccess: false,\n                submitNewEntryFailure: false,\n                submittedImages: [],\n                totalImages: [],\n                isOldUser: true,\n                userId: _id,\n                oldEntries: [],\n                folderPicked: false\n    \n            }\n\n\n        } else {\n            console.log('No saved user found', savedUser);\n\n\n            this.state = {\n            createNewUserRequest: false,\n            createNewUserSucess: false,\n            createNewUserFailure: false,\n            submitNewEntryRequest: false,\n            submitNewEntrySuccess: false,\n            submitNewEntryFailure: false,\n            submittedImages: [],\n            totalImages: [],\n            isOldUser: false,\n            userId: `${+ new Date()}`,\n            oldEntries: [],\n            folderPicked: false\n\n        }\n\n\n        }\n\n        \n        this.directoryRef = React.createRef();\n\n        this.getEntriesByUser = this.getEntriesByUser.bind(this);\n        this.createNewEntry = this.createNewEntry.bind(this);\n        this.handleSubmitButton = this.handleSubmitButton.bind(this);\n        this.handleSkipButton = this.handleSkipButton.bind(this);\n        this.handleDirectoryChange =  this.handleDirectoryChange.bind(this);\n    }\n\n    getEntriesByUser(userId) {\n\n        this.setState({fetchOldEntriesRequest: true});\n\n        api.getOldEntriesByUser(userId).then(\n            (response) => {\n                if (response.ok) {\n                    this.setState({\n                        fetchOldEntriesRequest:false,\n                        fetchOldEntriesSucess: true,\n                        fetchOldEntriesFailure: false,\n                        oldEntries: response.data,\n                    })\n//                    this.generateNewPrompt();\n                } else {\n                    this.setState({\n                        fetchOldEntriesRequest: false,\n                        fetchOldEntriesFailure: true,\n                        fetchOldEntriesSucess: false,\n                        oldEntries: []\n                    })\n                }\n            },\n            (err) => {\n                console.log('Error while fetching old entries' ,err);\n                this.setState({\n                    fetchOldEntriesRequest: false,\n                    fetchOldEntriesFailure: true,\n                })\n            }\n        )\n    }\n\n    createNewUser(userId) {\n        this.setState({ createNewUserRequest: true });\n        api.createUser({\n            _id: userId,\n            createdOn: new Date()\n        }).then((response) => {\n            if (response.ok) {\n                this.setState({\n                    createNewUserRequest: false,\n                    createNewEntrySuccess: true,\n                    createNewUserFailure: false,\n                    userId: response.data._id\n                })\n                this.generateNewPrompt();\n                localStorage.setItem('samajhUser', JSON.stringify(response.data))\n            } else {\n                this.setState({\n                    createNewUserRequest: false,\n                    createNewEntrySuccess: false,\n                    createNewUserFailure: true,\n                })\n            }\n        }, (error) => {\n            console.log('Error occurred while creating user', error)\n            this.setState({\n                createNewUserFailure: true,\n                createNewEntrySuccess: false,\n            })\n\n        })\n    }\n\n    generateNewPrompt() {\n        const {imageIndex, totalImages} = this.state;\n        if (imageIndex >= totalImages.length - 1) {\n            alert('all the images were already processed')\n            return\n        }  \n        this.setState({\n            currentImage: `something_${+ new Date()}`,\n            value: '',\n            imageIndex: imageIndex + 1,\n        })\n    }\n\n\n    \n    createNewEntry(entry) {\n\n        this.setState({createNewEntryRequest: true})\n\n        api.createNewEntry(entry).then(\n            (response) => {\n                if (response.ok) {\n                    this.setState({\n                        createNewEntryRequest: false,\n                        createNewEntrySuccess: true,\n                        createNewEntryFailure: false,\n                    })\n                    this.generateNewPrompt();\n                } else {\n                    this.setState({\n                        createNewEntryRequest: false,\n                       createNewEntryFailure: true,\n                       createNewEntrySuccess: false,\n                    })\n                }\n            },\n            (err) => {\n                console.log('Error in creating new entry', err)\n                this.setState({\n                    createNewEntryRequest: false,\n                    createNewEntryFailure: true\n                })\n            }\n            );\n    }\n\n\n    handleSubmitButton() {\n        const {userId, value, imageIndex, totalImages} = this.state;\n\n        if (!value) { alert('Please provide a valid value'); return}\n\n        console.log('here from handle submit ', totalImages[imageIndex])\n        this.createNewEntry({ userId, path: totalImages[imageIndex].webkitRelativePath, value, timestamp: new Date()})\n    }\n\n    handleSkipButton() {\n        this.generateNewPrompt();\n    }\n\n    handleDirectoryChange() { \n\n        console.log('From handle directory change', this.directoryRef.current.files[4]);\n        console.log('Here is one of the file url', URL.createObjectURL(this.directoryRef.current.files[4]) )\n\n        const { isOldUser, oldEntries } = this.state;\n\n        function comparer(otherArray){\n            return function(current){\n              return otherArray.filter(function(other){\n                return other.path == current.webkitRelativePath\n              }).length == 0;\n            }\n          }\n          \n\n        if(isOldUser) {\n            this.setState({folderPicked: true, imageIndex : 0, totalImages: Array.from(this.directoryRef.current.files).filter(comparer(oldEntries)) })\n        } else {\n            this.setState({folderPicked: true, imageIndex : 0, totalImages: this.directoryRef.current.files })\n        }\n\n        \n    }\n\n\n\n\n\n\n    componentDidMount() {\n\n        const { isOldUser, userId } = this.state;\n       \n        if (isOldUser) {\n            this.getEntriesByUser(userId)\n        } else {\n            this.createNewUser(userId)\n        }\n\n\n    }\n\n\n\n\n    render () {\n\n        const {   fetchOldEntriesRequest,\n            fetchOldEntriesSucess,\n            fetchOldEntriesFailure,\n            createNewEntryRequest,\n            submitNewEntrySuccess,\n            submitNewEntryFailure,\n            submittedImages,\n            isOldUser,\n            oldEntries,\n            currentImage,\n            folderPicked,\n            imageIndex,\n            totalImages,\n            userId,\n            value } = this.state;\n\n\n       \n\n            if (fetchOldEntriesRequest) {\n                return (\n                    <div>\n                        Please wait while we analyze your previous submittions\n                    </div>\n                )\n            }\n\n            if (createNewEntryRequest) {\n                return (\n                    <div>\n                        Please wait while we submit your current entry\n                    </div>\n                )\n            }\n\n            if (userId )\n            return ( <div>\n                    Welcome userID {userId}, Please select a local folder with images then provide the values or skip the image.\n\n                    <p>\n                    <input ref={this.directoryRef} onChange={this.handleDirectoryChange}  directory=\"\" webkitdirectory=\"\" type=\"file\" />\n                    </p>\n\n                    \n                        {folderPicked? <div> <img className='image-box' src={URL.createObjectURL(totalImages[imageIndex])}></img> \n                    \n\n\n                    <div className=\"TxtInputFrame\">\n                    Image Details\n                    </div>\n                    <input\n                        type=\"text\"\n                        className=\"InputFrame\"\n                        placeholder=\"Image Data\"\n                        value={this.state.value}\n                        required\n                    onChange={(e) => { this.setState({ value: e.target.value.trim() }) }} />\n\n                    \n<button type=\"button\" onClick={ this.handleSubmitButton}>Submit Button</button>\n                   \n                    <p>\n                    <button onClick={this.handleSkipButton}>Skip</button>\n                    </p>\n            </div> : <div>Thanks</div>} </div>\n            )\n\n            return (\n                <div>\n                    Failed to handle the cases\n                </div>\n            )\n\n\n\n\n    }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport './App.css';\nimport Homepage from './components/homepage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}